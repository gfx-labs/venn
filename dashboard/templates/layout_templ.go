// Code generated by templ - DO NOT EDIT.

// templ: version: v0.3.906
package templates

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

func Layout(content templ.Component) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 1, "<!doctype html><html lang=\"en\"><head><meta charset=\"UTF-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><title>Venn Dashboard</title><link rel=\"stylesheet\" href=\"/dashboard/static/css/output.css\"><script src=\"/dashboard/static/js/htmx.min.js\"></script><script src=\"/dashboard/static/js/hyperscript.min.js\"></script></head><body class=\"bg-gray-900 text-gray-100 min-h-screen\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = content.Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 2, "<!-- Reload Timer Modal --><div class=\"fixed bottom-4 right-4 bg-gray-800 border border-gray-700 rounded-lg p-3 shadow-lg\"><div class=\"flex items-center gap-3\"><div class=\"relative h-5 w-5\"><svg class=\"h-5 w-5 transform -rotate-90\"><circle cx=\"10\" cy=\"10\" r=\"8\" stroke=\"#4B5563\" stroke-width=\"2\" fill=\"none\"></circle> <circle id=\"progress-circle\" cx=\"10\" cy=\"10\" r=\"8\" stroke=\"#60A5FA\" stroke-width=\"2\" fill=\"none\" stroke-dasharray=\"50.26548\" stroke-dashoffset=\"50.26548\"></circle></svg></div><div class=\"text-sm\"><span class=\"text-gray-400\">Refreshes every 5 seconds</span></div></div></div><script>\n            // Progress circle for HTMX refresh\n            (function() {\n                let countdown = 5;\n                let isUpdating = false;\n                const progressCircle = document.getElementById('progress-circle');\n                const circumference = 2 * Math.PI * 8; // 2Ï€r where r=8\n                \n                function updateProgress() {\n                    if (isUpdating) return;\n                    \n                    const progress = (5 - countdown) / 5;\n                    const offset = circumference - (progress * circumference);\n                    if (progressCircle) {\n                        progressCircle.style.strokeDashoffset = offset;\n                        progressCircle.style.transition = 'stroke-dashoffset 1s linear';\n                    }\n                }\n                \n                // Reset when HTMX makes a request\n                document.body.addEventListener('htmx:beforeRequest', function() {\n                    isUpdating = true;\n                    countdown = 5;\n                    // Keep circle full during update\n                    if (progressCircle) {\n                        progressCircle.style.strokeDashoffset = '0';\n                        progressCircle.style.transition = 'none';\n                    }\n                });\n                \n                // Resume after request completes\n                document.body.addEventListener('htmx:afterRequest', function() {\n                    isUpdating = false;\n                    countdown = 5;\n                    if (progressCircle) {\n                        progressCircle.style.strokeDashoffset = circumference;\n                        progressCircle.style.transition = 'none';\n                    }\n                });\n                \n                // Update every second\n                setInterval(function() {\n                    if (!isUpdating && countdown > 0) {\n                        countdown--;\n                        updateProgress();\n                    }\n                    if (countdown <= 0 && !isUpdating) {\n                        countdown = 5;\n                    }\n                }, 1000);\n                \n                // Initialize\n                updateProgress();\n            })();\n        </script></body></html>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

var _ = templruntime.GeneratedTemplate
