package templates

import (
    "fmt"
    "time"
)

type ChainDetailData struct {
    ChainInfo
    Remotes []RemoteInfo
}

templ ChainDetail(data ChainDetailData) {
    @Layout(ChainDetailContent(data))
}

templ ChainDetailContent(data ChainDetailData) {
    <div class="container mx-auto px-4 py-8">
        <div class="mb-8">
            <a href="/dashboard" class="text-gray-400 hover:text-white transition-colors mb-4 block">&larr; Back to Dashboard</a>
            <h1 class="text-4xl font-bold">{ data.Name }</h1>
            <p class="text-gray-400 mt-2">Chain ID: { fmt.Sprintf("%d", data.ChainID) }</p>
        </div>
        
        <div class="grid grid-cols-1 md:grid-cols-4 gap-4 mb-8">
            <div class="bg-gray-800 rounded-lg p-4 border border-gray-700">
                <p class="text-gray-400 text-sm mb-1">Head Block</p>
                <p class="text-2xl font-mono">{ fmt.Sprintf("%d", data.HeadBlock) }</p>
            </div>
            <div class="bg-gray-800 rounded-lg p-4 border border-gray-700">
                <p class="text-gray-400 text-sm mb-1">Status</p>
                <div class="mt-2">
                    @StatusBadge(data.Status)
                </div>
            </div>
            <div class="bg-gray-800 rounded-lg p-4 border border-gray-700">
                <p class="text-gray-400 text-sm mb-1">Total Remotes</p>
                <p class="text-2xl">{ fmt.Sprintf("%d", data.RemoteCount) }</p>
            </div>
            <div class="bg-gray-800 rounded-lg p-4 border border-gray-700">
                <p class="text-gray-400 text-sm mb-1">Health</p>
                <div class="flex items-center gap-3 mt-2">
                    <div class="flex items-center">
                        <div class="w-3 h-3 bg-green-400 rounded-full mr-1"></div>
                        <span class="text-lg">{ fmt.Sprintf("%d", data.HealthyCount) }</span>
                    </div>
                    <div class="flex items-center">
                        <div class="w-3 h-3 bg-red-500 rounded-full mr-1"></div>
                        <span class="text-lg">{ fmt.Sprintf("%d", data.UnhealthyCount) }</span>
                    </div>
                </div>
            </div>
        </div>
        
        <h2 class="text-2xl font-semibold mb-6">Remote Endpoints</h2>
        
        <div id="remotes-container" class="space-y-3"
             hx-get={ fmt.Sprintf("/dashboard/%s/remotes", data.Name) }
             hx-trigger="every 5s">
            @RemotesList(data.Remotes)
        </div>
    </div>
}

templ RemotesList(remotes []RemoteInfo) {
    for _, remote := range remotes {
        @RemoteCard(remote)
    }
}

templ RemoteCard(remote RemoteInfo) {
    <div class="bg-gray-800 rounded-lg p-4 border border-gray-700">
        <div class="flex flex-col gap-2">
            <div class="flex items-center justify-between">
                <div class="flex items-center gap-4 min-w-0 flex-1">
                    <div class="flex-shrink-0">
                        @StatusBadge(remote.Status)
                    </div>
                    <div class="min-w-0 flex-1">
                        <h3 class="font-semibold truncate">{ remote.Name }</h3>
                        <p class="text-xs text-gray-500">Priority: { fmt.Sprintf("%d", remote.Priority) }</p>
                    </div>
                </div>
                <div class="flex items-center gap-4 ml-4">
                    <div class="text-right">
                        <p class="text-xs text-gray-400">Latest Block</p>
                        <p class="font-mono">{ fmt.Sprintf("%d", remote.LatestBlock) }</p>
                    </div>
                    if remote.MaxBlockLookBack > 0 {
                        <div class="text-right">
                            <p class="text-xs text-gray-400">Max Lookback</p>
                            <p class="font-mono text-sm">{ fmt.Sprintf("%d blocks", remote.MaxBlockLookBack) }</p>
                        </div>
                    }
                    if remote.RateLimitPerSec > 0 {
                        <div class="text-right">
                            <p class="text-xs text-gray-400">Rate Limit</p>
                            <p class="font-mono text-sm">{ fmt.Sprintf("%.0f/%.0f", remote.RateLimitTokens, remote.RateLimitPerSec) }</p>
                            <p class="text-xs text-gray-500">Burst: { fmt.Sprintf("%d", remote.RateLimitBurst) }</p>
                        </div>
                    }
                    if remote.LatencyAvg > 0 {
                        <div class="text-right">
                            <p class="text-xs text-gray-400">Health Check Latency</p>
                            <p class="font-mono text-sm">{ remote.LatencyAvg.Round(time.Microsecond).String() }</p>
                        </div>
                        <div class="text-right">
                            <p class="text-xs text-gray-400">Min/Max</p>
                            <p class="font-mono text-sm">{ remote.LatencyMin.Round(time.Microsecond).String() } / { remote.LatencyMax.Round(time.Microsecond).String() }</p>
                        </div>
                    }
                </div>
            </div>
            if remote.LastError != "" {
                <div class="bg-red-900/20 border border-red-800 rounded p-2">
                    <p class="text-xs text-red-400 font-semibold mb-1">Last Error:</p>
                    <p class="text-xs text-red-300 font-mono">{ remote.LastError }</p>
                </div>
            }
        </div>
    </div>
}